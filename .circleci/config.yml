version: 2.1
parameters:
  workflow-id:
    type: string
    default: "${CIRCLE_WORKFLOW_ID}"

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
              --stack-name "udapeople-backend-<<parameters.workflow_id>>"
            aws cloudformation delete-stack \
              --stack-name "udapeople-frontend-<<parameters.workflow_id>>"
            aws s3 rm s3://udapeople-019204297525 --recursive

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string  
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=`curl --insecure https://kvdb.io/${kvd_token}/migration_<<parameters.workflow_id>>`
            echo $SUCCESS
            if(( $SUCCESS==1 )); then
              cd backend
              npm i
              npm run migration:revert
            fi

  install_dependencies:
    description: Installs Python3, Ansible, AWSCLI, Node, NPM
    steps:
      - run:
          name: Install ansible
          command: |
                apk add --update ansible
      - run:
          name: Install aws
          command: |
                apk add --no-cache \
                    python3 \
                    py3-pip \
                && pip3 install --upgrade pip \
                && pip3 install --no-cache-dir \
                    awscli \
                && rm -rf /var/cache/apk/*

                aws --version 
      - run:
          name: Install NPM and Node
          command: |
            apk add --update nodejs nodejs-npm
      - run:
          name: Install tar and gzip and curl
          command: |
            apk add tar gzip curl
             
imgdefault: &imgdefault
  docker:
   - image: circleci/node:13.8.0

orbs:
  slack: circleci/slack@4.1
  aws-cli: circleci/aws-cli@1.3.0
  jq: circleci/jq@2.2.0

jobs:

  build-frontend:
    <<: *imgdefault
    steps:
      - checkout
      - jq/install
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1

  build-backend:
    <<: *imgdefault
    steps:
      - checkout
      - jq/install
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1

  test-frontend:
    <<: *imgdefault
    steps:
      - checkout
      - jq/install
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end test
          command: |
            cd backend
            npm install
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1

  test-backend:
    <<: *imgdefault
    steps:
      - checkout
      # - jq/install
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1
            
  scan-frontend:
    <<: *imgdefault 
    steps:
      - checkout
      - jq/install
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1

  scan-backend:
    <<: *imgdefault 
    steps:
      - checkout
      - jq/install
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
    - image: amazon/aws-cli # that supports AWS CLI
    steps:
      - checkout
      - jq/install
      - run: yum install tar gzip -y

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text |tail -1 >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - slack/notify:
          event: fail
          template: basic_fail_1
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    docker:
    - image: python:3.7-alpine3.11 # that supports Ansible
    steps:
      - checkout
      - install_dependencies
      - jq/install
      - add_ssh_keys:
          fingerprints: ["31:15:91:9c:f5:09:f2:cb:04:af:21:79:2e:16:15:68"]
      - attach_workspace:
          at: ~/
      - run: 
          name: disbale ssh checking
          command: |
                export ANSIBLE_HOST_KEY_CHECKING=False
      # Add ssh keys with fingerprint
      # attach workspace
      - run: cat .circleci/ansible/inventory.txt 
      # - run: yum install tar gzip -y
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
            # # Your code here
            # exit 1
      # Here's where you will add some code to rollback on failure   
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    <<: *imgdefault # that supports NodeJS
    steps:
      - checkout
      - jq/install
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |   
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl https://kvdb.io/${kvd_token}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
     # Here's where you will add some code to rollback on failure
      - slack/notify:
          event: fail
          template: basic_fail_1      
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-frontend:
    docker:
    - image: python:3.7-alpine3.11 # that supports AWS CLI
    steps:
      - checkout
      - install_dependencies

      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text |tail -1)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-backend:
    docker:
    - image: python:3.7-alpine3.11 # that supports Ansible
    steps:
      - checkout
      - install_dependencies
      - add_ssh_keys:
          fingerprints: ["31:15:91:9c:f5:09:f2:cb:04:af:21:79:2e:16:15:68"]
      - attach_workspace:
          at: ~/
      - run: 
          name: disbale ssh checking
          command: |
                export ANSIBLE_HOST_KEY_CHECKING=False
      - run: cat .circleci/ansible/inventory.txt 
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            pwd
            tar -C backend -czvf artifact.tar.gz .
            ls -l
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

      # - slack/notify:
      #     event: fail
      #     template: basic_fail_1
#   cloudfront-update:
#     <<: *imgdefault # that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

      # - slack/notify:
      #     event: fail
      #     template: basic_fail_1
# cleanup:
#     <<: *imgdefault #
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            
      # - slack/notify:
      #     event: fail
      #     template: basic_fail_1

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]